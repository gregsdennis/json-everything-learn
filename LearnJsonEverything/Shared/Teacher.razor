@using BlazorMonaco.Editor
@using Json.Schema
@using LearnJsonEverything.Services
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using System.Text.Encodings.Web
@using System.Text.Json
@using Json.More
@using LearnJsonEverything.Services.Runners
@using Yaml2JsonNode
@using EditorOptions = LearnJsonEverything.Services.EditorOptions

@inject DataManager DataManager;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject HttpClient Client;

<div id="layout" class="row fill-remaining row-margin-reset">
	<div class="col-4 d-flex">
		<div class="grid-panel flex-grow-1">
			<MarkdownSpan Content="@Instructions"></MarkdownSpan>
		</div>
	</div>
	<div class="col-8 d-flex">
		<div id="right-panel" class="row row-margin-reset flex-grow-1">
			<div id="workspace" class="col-12 d-flex flex-grow-1">
				<div class="grid-panel flex-grow-1">
					<StandaloneCodeEditor @ref="_codeEditor" Id="editor-schema" ConstructionOptions="OptionsForEditor"
					                      CssClass="h-100"></StandaloneCodeEditor>
				</div>
			</div>
			<div id="controls" class="col-12">
				<div class="d-flex">
					<button class="btn btn-primary m-1" @onclick="Run">Run</button>
					<button class="btn btn-primary m-1">content</button>
					<button class="btn btn-primary m-1">content</button>
				</div>
			</div>
			<div id="output" class="col-12 d-flex">
				<div class="grid-panel flex-grow-1">
					<StandaloneCodeEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="OptionsForOutput"
					                      CssClass="h-100"></StandaloneCodeEditor>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private StandaloneCodeEditor _codeEditor;
	private StandaloneCodeEditor _outputEditor;
	private MetadataReference[] _references;
	private LessonPlan _lessons;
	private LessonData? _currentLesson;

	[Parameter]
	public string LessonSource { get; set; }

	private string Instructions { get; set; }

	private static StandaloneEditorConstructionOptions OptionsForEditor(StandaloneCodeEditor _) => EditorOptions.Basic("csharp", 4);
	private static StandaloneEditorConstructionOptions OptionsForOutput(StandaloneCodeEditor _) => EditorOptions.Readonly("json", 2);
#pragma warning restore CS8618

	private async Task Run()
	{
		try
		{
			var userCode = await _codeEditor.GetValue();

			await _outputEditor.SetValue("");
			var results = SchemaRunner.Run(userCode, _currentLesson!, _references);
			await _outputEditor.SetValue(string.Join(Environment.NewLine, results!));
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text", JsRuntime);
			await _outputEditor.SetValue(e.Message);
		}
	}

	private Task PreviousLesson()
	{
		_currentLesson = _lessons.GetPrevious(_currentLesson?.Id);
		return LoadLesson();
	}

	private Task NextLesson()
	{
		_currentLesson = _lessons.GetNext(_currentLesson?.Id);
		return LoadLesson();
	}

	private Task Reset()
	{
		return LoadLesson();
	}

	private async Task LoadLesson()
	{
		_currentLesson ??= _lessons[0];
		Instructions = SchemaRunner.BuildInstructions(_currentLesson);
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadAssemblyReferences();
		await DownloadLessonPlan();
		
		await LoadLesson();

		await base.OnInitializedAsync();
	}

	private async Task LoadAssemblyReferences()
	{
		var refs = AppDomain.CurrentDomain.GetAssemblies();

		var references = new MetadataReference[refs.Length];

		foreach (var reference in refs.Where(x => !x.IsDynamic))
		{
			Console.WriteLine($"{reference.FullName}\n  Location - {reference.Location}\n");
		}

		int i = 0;
		foreach (var reference in refs.Where(x => !x.IsDynamic))
		{
			var source = $"/_framework/{reference.FullName!.Split(',')[0]}.dll";
			try
			{
				var stream = await Client.GetStreamAsync(source);
				references[i] = MetadataReference.CreateFromStream(stream);
				i++;
			}
			catch (Exception e)
			{
				Console.WriteLine(e);
				Console.WriteLine(source);
			}
		}

		_references = references.ToArray();
	}

	private async Task DownloadLessonPlan()
	{
		var yamlText = await Client.GetStringAsync(LessonSource);
		var yaml = YamlSerializer.Parse(yamlText);
		var json = yaml.ToJsonNode().FirstOrDefault();
		Console.WriteLine(json.AsJsonString());
		_lessons = json.Deserialize<LessonPlan>(SerializerOptions)!;
	}
}
