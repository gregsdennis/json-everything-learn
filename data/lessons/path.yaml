---
- id: 26b6ebca-58e6-4814-86ea-494ed844c9a8
  background: |
    JSON Path is a syntax for querying JSON data.

    _JsonPath.Net_ provides an implementation that conforms to the official IETF
    specification, [RFC 9535](https://www.rfc-editor.org/rfc/rfc9535.html).  Like the other
    guides on this site, this guide will teach you how to use the library _JsonPath.Net_.
    
    However, because there are so few implementations of the RFC, and little to no
    documentation of it, this guide will also teach you the features of JSON Path itself,
    as described by the RFC.

    We'll start with the library since there is less to cover, then we'll move on to
    what you can do with it.

    Unlike JSON Schema, JSON Logic, or other technologies that are actually represented in
    JSON, JSON Path is its own syntax, so it must usually be parsed.  The primary way to
    parse a path is using the static `JsonPath.Parse()` method.
  docs: 'path/basics'
  title: Parsing
  instructions: |
    Parse the given JSON Path text into a `path` variable.
  contextCode: |-
    using System.Text.Json;
    using System.Text.Json.Nodes;
    using Json.Path;
    
    namespace LearnJsonEverything;
    
    public class Lesson : ILessonRunner<PathResult>
    {
        public PathResult Run(JsonObject test)
        {
            var data = test["data"];
            var pathText = "$.foo.bar";

            /* USER CODE */

            return path.Evaluate(data);
        }
    }
  solution: |-
    using System.Text.Json;
    using System.Text.Json.Nodes;
    using Json.Path;
    
    namespace LearnJsonEverything;
    
    public class Lesson : ILessonRunner<PathResult>
    {
        public PathResult Run(JsonObject test)
        {
            var data = test["data"];
            var pathText = "$.foo.bar";

            var path = JsonPath.Parse(pathText);

            return path.Evaluate(data);
        }
    }
  tests:
  - data: { "foo": { "bar": "a string" } }
    result: ['a string']
